<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdn.materialdesignicons.com/4.9.95/css/materialdesignicons.min.css">
    <link href="../views/images/logo.png" rel="icon" type="image/png">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/img/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicon-16x16.png">
    <link rel="manifest" href="/assets/img/site.webmanifest">
</head>
<body class="">

<div class="section is-small is-fullheight">
    <div class="container has-text-centered">

        <div class="columns is-centered">

            <div class="column is-two-fifths">
                <div class=" is-spaced">
                    <figure class="image is-64x64" style="margin: 0 auto; border: 2px solid dodgerblue; border-radius: 50%">
                        <img class="is-rounded" src="/assets/img/logo.png">
                    </figure>
                    <h1 class="has-text-centered has-text-weight-bold is-size-5 pt-4 pb-4">{{ pageName }}</h1>
                    <!-- Selfie Form -->
                    <form id="selfieForm" method="post" action="" enctype="multipart/form-data">
                        <div class="field">
                            <label class="">Capture Passport Photo</label>
                            <div class="control has-text-centered">
                                <video id="cameraStream" autoplay playsinline width="300" height="225" style="border: 2px solid dodgerblue; border-radius: 5px;"></video>
                                <canvas id="selfieCanvas" width="400" height="400" style="display: none;"></canvas>
                            </div>
                            <button type="button" class="button is-info mt-3" onclick="capturePhoto()">Take Photo</button>
                            <input type="hidden" name="profile-picture" id="selfieData">
                        </div>

                        <div class="columns is-multiline">
                            <div class="column is-6">
                                <div class="field mt-5">
                                    <div class="control">
                                        <div class="buttons">
                                            <button type="submit" name="next" class="button is-normal is-info is-focused is-fullwidth" onclick="showLoadingOverlay(event)">
                                                <span>Next</span>
                                                <span class="mdi mdi-chevron-right is-size-3"></span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="column is-6">
                                <div class="field mt-5">
                                    <div class="control">
                                        <a href="javascript:history.back()" class="button is-normal is-link is-fullwidth is-light">
                                            <span class="icon"><i class="mdi mdi-arrow-left"></i></span>
                                            <span>Back</span>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                    <p class="mt-6">
                        Already have an account? <a href="/">Sign In</a>
                    </p>
                    <hr>
                    <p class="mt-5">All rights reserved, Copyright &copy; {{ "now"|date("Y") }} . Chalom Investments Limited</p>
                    <p><strong>Powered By:</strong> <a href="https://www.fortresshubtechnologies.com" target="_blank">Fortress Hub Technologies</a></p>
                </div>
            </div>
        </div>
    </div>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Toggle mobile navigation menu
    document.addEventListener('DOMContentLoaded', function ()
    {
        var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

        if ($navbarBurgers.length > 0) {
            $navbarBurgers.forEach(function ($el) {
                $el.addEventListener('click', function () {
                    var target = $el.dataset.target;
                    var $target = document.getElementById(target);
                    $el.classList.toggle('is-active');
                    $target.classList.toggle('is-active');
                });
            });
        }
    });
</script>
<script>
    const video = document.getElementById('cameraStream');
    const canvas = document.getElementById('selfieCanvas');
    const selfieData = document.getElementById('selfieData');

    // Start camera
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            video.srcObject = stream;
        })
        .catch(err => {
            alert("Unable to access camera: " + err);
        });

    // Capture photo
    function capturePhoto() {
        const context = canvas.getContext('2d');

        // Set desired capture size (square)
        const size = 400;

        // Get actual video dimensions
        const videoWidth = video.videoWidth;
        const videoHeight = video.videoHeight;

        // Center-crop the square from the middle of the video
        const cropSize = Math.min(videoWidth, videoHeight);
        const sx = (videoWidth - cropSize) / 2;
        const sy = (videoHeight - cropSize) / 2;

        // Clear and draw the cropped square to canvas
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.drawImage(video, sx, sy, cropSize, cropSize, 0, 0, size, size);

        canvas.style.display = 'block';

        // Export as base64 PNG
        const dataURL = canvas.toDataURL('image/png');
        selfieData.value = dataURL;
    }

</script>
<script>
    function showLoadingOverlay(event) {
        event.preventDefault();

        const form = document.getElementById('selfieForm');
        const button = event.target.closest('button');
        const originalBtnHTML = button.innerHTML;

        button.disabled = true;
        button.innerHTML = `<span class="loader"></span> Saving...`;

        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData,
            redirect: 'follow' // Automatically follow 302 redirect
        })
            .then(response => {
                // If the server responds with a redirect, browser automatically follows
                // So if we're here, we're on the next page
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    return response.text().then(html => {
                        // fallback: show any returned HTML (e.g., error page)
                        document.body.innerHTML = html;
                    });
                }
            })
            .catch(error => {
                console.error(error);
                alert("Something went wrong.");
                button.disabled = false;
                button.innerHTML = originalBtnHTML;
            });
    }
</script>
<script>
    // function previewSelfie(input) {
    //     const file = input.files[0];
    //
    //     if (file) {
    //         const reader = new FileReader();
    //         reader.onload = function (e) {
    //             const selfieCanvas = document.getElementById('selfieCanvas');
    //             const ctx = selfieCanvas.getContext('2d');
    //
    //             const img = new Image();
    //             img.onload = function () {
    //                 // Draw the image on the canvas
    //                 ctx.clearRect(0, 0, selfieCanvas.width, selfieCanvas.height);
    //                 ctx.drawImage(img, 0, 0, selfieCanvas.width, selfieCanvas.height);
    //
    //                 // Show the canvas
    //                 selfieCanvas.style.display = 'block';
    //             };
    //
    //             img.src = e.target.result;
    //         };
    //         reader.readAsDataURL(file);
    //     }
    // }

</script>

</body>
</html>
<style>
    .error
    {
        background-color: #d50000;
        color: white;
    }
    .error
    {
        color: #d50000;
    }
    #loading-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    #loading-message {
        font-size: 18px;
    }
</style>